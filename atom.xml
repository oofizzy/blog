<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神奇的战士</title>
  
  <subtitle>这个不辣～</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangshub.github.io/"/>
  <updated>2017-12-30T11:32:30.924Z</updated>
  <id>http://wangshub.github.io/</id>
  
  <author>
    <name>神奇的战士</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>教你用Python来玩微信跳一跳</title>
    <link href="http://wangshub.github.io/2017/12/29/%E6%95%99%E4%BD%A0%E7%94%A8Python%E6%9D%A5%E7%8E%A9%E5%BE%AE%E4%BF%A1%E8%B7%B3%E4%B8%80%E8%B7%B3/"/>
    <id>http://wangshub.github.io/2017/12/29/教你用Python来玩微信跳一跳/</id>
    <published>2017-12-29T02:02:41.000Z</published>
    <updated>2017-12-30T11:32:30.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="教你用Python来玩微信跳一跳"><a href="#教你用Python来玩微信跳一跳" class="headerlink" title="教你用Python来玩微信跳一跳"></a>教你用Python来玩微信跳一跳</h1><blockquote><p>2017年12月28日下午，微信发布了 6.6.1 版本，加入了「小游戏」功能，并提供了官方 demo「跳一跳」。</p></blockquote><p><a href="https://wangshub.github.io">blog 地址</a></p><p><a href="https://github.com/wangshub/wechat_jump_game" target="_blank" rel="noopener">github 地址</a></p><p><a href="https://zhuanlan.zhihu.com/p/32452473" target="_blank" rel="noopener">知乎专栏</a></p><h2 id="游戏模式"><a href="#游戏模式" class="headerlink" title="游戏模式"></a>游戏模式</h2><p>这是一个 2.5D 插画风格的益智游戏，玩家可以通过按压屏幕时间的长短来控制这个「小人」跳跃的距离。可能刚开始上手的时候，因为时间距离之间的关系把握不恰当，只能跳出几个就掉到了台子下面。<br>玩法类似于《flappy bird》</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmxe4gnfhnj20hs0a0t8q.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>如果能精确测量出起始和目标点之间测距离，就可以估计按压的时间来精确跳跃？所以花2个小时写了一个python脚本进行验证</strong></p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><ul><li>Python 2.7</li><li>Android 手机</li><li>Adb 驱动</li><li>Python Matplot绘图</li></ul><h2 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h2><ol><li>将手机点击到《跳一跳》小程序界面；</li><li>用Adb 工具获取当前手机截图，并用adb将截图pull上来</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p /sdcard/1.png</span><br><span class="line">adb pull /sdcard/1.png .</span><br></pre></td></tr></table></figure><ol><li>用matplot显示截图；</li><li>用鼠标点击起始点和目标位置，计算像素距离；</li><li>根据像素距离，计算按压时间；</li><li>用Adb工具点击屏幕蓄力一跳；</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input swipe x y x y time</span><br></pre></td></tr></table></figure><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmxel5dkxvj20u01hcmzx.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>可以对拉上来的图片进行颜色分割，识别小人和目标中心店，这样就不需要手动点击自动弹跳。<br>事实证明，机器人比人更会玩儿游戏。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;教你用Python来玩微信跳一跳&quot;&gt;&lt;a href=&quot;#教你用Python来玩微信跳一跳&quot; class=&quot;headerlink&quot; title=&quot;教你用Python来玩微信跳一跳&quot;&gt;&lt;/a&gt;教你用Python来玩微信跳一跳&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;2
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python蔡英文facebook主页分析_by神奇的战士</title>
    <link href="http://wangshub.github.io/2017/12/25/Python%E8%94%A1%E8%8B%B1%E6%96%87facebook%E4%B8%BB%E9%A1%B5%E5%88%86%E6%9E%90-by%E7%A5%9E%E5%A5%87%E7%9A%84%E6%88%98%E5%A3%AB/"/>
    <id>http://wangshub.github.io/2017/12/25/Python蔡英文facebook主页分析-by神奇的战士/</id>
    <published>2017-12-25T07:14:39.000Z</published>
    <updated>2017-12-25T07:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python蔡英文facebook主页分析-by神奇的战士"><a href="#Python蔡英文facebook主页分析-by神奇的战士" class="headerlink" title="Python蔡英文facebook主页分析(by神奇的战士)"></a><strong>Python</strong>蔡英文facebook主页分析(by神奇的战士)</h1><ul><li>博客地址：<a href="https://wangshub.github.io/">https://wangshub.github.io/</a></li><li>公众号：舒林笑笑生</li><li>拒绝转载</li></ul><p>用<a href="https://developers.facebook.com/tools/explorer/?method=GET&amp;path=tsaiingwen%2Fposts&amp;version=v2.11" target="_blank" rel="noopener">Facebook Graph API</a>和情绪分析API对蔡英文Facebook主页进行统计分析。</p><h2 id="1-说明"><a href="#1-说明" class="headerlink" title="1. 说明"></a>1. 说明</h2><p><a href="https://baike.baidu.com/item/%E8%94%A1%E8%8B%B1%E6%96%87/353?fr=aladdin" target="_blank" rel="noopener">蔡英文</a>2016年5月20日，蔡英文正式就任台湾地区领导人，成为台湾地区首位女性领导人。</p><p>最近台湾省地区新闻主要有：</p><blockquote><p>新闻来源： 人民网<br><a href="http://tw.people.com.cn/n1/2017/1222/c14657-29722289.html" target="_blank" rel="noopener">坚决惩治电信诈骗犯罪 切实维护两岸同胞利益</a><br><a href="http://tw.people.com.cn/n1/2017/1221/c14657-29720989.html" target="_blank" rel="noopener">两岸学者评新党人士被调查事件：民进党当局逆流而动终将自掘坟墓</a><br><a href="http://tw.people.com.cn/n1/2017/1126/c14657-29668078.html" target="_blank" rel="noopener">台民众高呼“醒来”，蔡英文不能继续装睡</a><br>…</p></blockquote><p><strong>但是真实的台湾同胞们是如何看待她的执政表现呢？</strong></p><h2 id="2-实现工具"><a href="#2-实现工具" class="headerlink" title="2. 实现工具"></a>2. 实现工具</h2><p>如果是直接爬取脸书的主页，需要进行模拟登陆，反爬虫，代理，验证等等一系列的操作。幸好脸书开放出了图API，可以在一定的请求限制下对脸书上的数据进行访问。注意在多线程请求API的时候，不应该请求的太快，否则会被系统封禁一段时间(不要问我为什么-_-)。</p><p><strong>目前为止使用了如下这些工具：</strong></p><ul><li>python 2.7</li><li><a href="https://developers.facebook.com/tools/explorer/?method=GET&amp;path=tsaiingwen%2Fposts&amp;version=v2.11" target="_blank" rel="noopener">Facebook Graph API</a></li><li>情感分析API</li><li>python 词云</li><li><a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">python 中文jieba分词</a></li><li>python Pandas</li><li>python 多线程</li></ul><h2 id="3-数据处理"><a href="#3-数据处理" class="headerlink" title="3. 数据处理"></a>3. 数据处理</h2><h3 id="3-1-posts"><a href="#3-1-posts" class="headerlink" title="3.1 posts"></a>3.1 posts</h3><p>首先测试脸书<a href="https://developers.facebook.com/tools/explorer/?method=GET&amp;path=tsaiingwen%2Fposts&amp;version=v2.11" target="_blank" rel="noopener">Facebook Graph API</a>，对蔡小姐的post进行访问，</p><p><strong>curl测试脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line"> "https://graph.facebook.com/v2.11/tsaiingwen/posts?access_token=xxxxxxxxxxxxxxxxx"</span><br></pre></td></tr></table></figure><p><strong>返回示例</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">"data": [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created_time"</span>: <span class="string">"2017-12-24T11:50:06+0000"</span>,</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"蔡想想🐱祝福大家聖誕快樂🎅</span></span><br><span class="line"><span class="string">        #MerryChristmas"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"46251501064_10154820163381065"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">],</span><br><span class="line">"paging": &#123;</span><br><span class="line">    "cursors": &#123;</span><br><span class="line">      "before": "xxxxxx",</span><br><span class="line">      "after": "xxxxx"</span><br><span class="line">    &#125;,</span><br><span class="line">    "next": "xxxxxxxxxxxxxxxxxxxxxx"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以观察到，脸书的每一个post都对应了一个唯一的<strong>id</strong>，由于post的数量是在太多，所以一次请求无法完整获取。根据<strong>next</strong>可以得到下一页的post，直到<strong>next</strong>为空时，表示所有的post获取完毕。</p><p>根据以上原理，我获取了蔡小姐从开通脸书第一天起到今天，发的每一条post。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmsa0xjo5fj21py0ht0ul.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>横坐标：时间</li><li>纵坐标：每天发文数量</li></ul><p>自 <em>2008-10-22T13:55:20+0000</em>蔡小姐发了第一条post以来，一共发了<strong>4120</strong>篇状态，基本上在脸书上还是非常活跃的，在2012年最多一天发送了24条状态，成功刷屏。</p><h3 id="3-2-comments"><a href="#3-2-comments" class="headerlink" title="3.2 comments"></a>3.2 comments</h3><p>与 <strong>3.1</strong>节类似，每一个post下都会有网友进行评论，那么如何获取所有评论?参考图谱API文档，利用测试脚本</p><p><strong>curl测试脚本</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X GET \</span><br><span class="line"> "https://graph.facebook.com/v2.11/46251501064_10154729068451065/comments?access_token=xxxxxxxxxxxx"</span><br></pre></td></tr></table></figure><p><strong>返回示例</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created_time"</span>: <span class="string">"2017-11-13T07:15:25+0000"</span>,</span><br><span class="line">      <span class="attr">"message"</span>: <span class="string">"XXXXXXXX"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"10154729068451065_10154729097936065"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">  <span class="string">"paging"</span>: &#123;</span><br><span class="line">  <span class="attr">"cursors"</span>: &#123;</span><br><span class="line">      <span class="attr">"before"</span>: <span class="string">"MTQyNQZDZD"</span>,</span><br><span class="line">      <span class="attr">"after"</span>: <span class="string">"MTM5MQZDZD"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"next"</span>: <span class="string">"https://graph.facebook.com/v2.11/46251501064_10154729068451065/comments?access_token=xxxxxxxx&amp;pretty=0&amp;limit=25&amp;after=MTM5MQZDZD"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>每一条评论都对应着唯一的<strong>id</strong>，<strong>next</strong>字段是下一页的评论内容。可以通过设置，选择一夜最多显示100条评论。以此逐级获取所有的评论。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmsadx87t0j20m80goacm.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>横坐标：时间</li><li>纵坐标：每条状态对应的评论数量</li></ul><p>一共爬取了<strong>1830322</strong>条网友评论，最多评论数是<strong>23630</strong>条。其中几次出现了较大值，原因应该是前几次大陆网友自发组织的Facebook远征军去进行<strong>友好访问</strong>了。具体内容可以接下来对这几次的峰值进行详细分析。</p><blockquote><p><strong>相关新闻</strong>：<br><a href="http://news.163.com/16/0122/19/BDV5H0O200014SEH.html" target="_blank" rel="noopener">帝吧“远征”facebook｜一场表情包大战的爱国交流</a><br><a href="https://www.zhihu.com/question/39663757" target="_blank" rel="noopener">如何评价李毅吧 2016 年 1 月 20 日「出征」Facebook？</a></p></blockquote><h2 id="4-数据分析"><a href="#4-数据分析" class="headerlink" title="4. 数据分析"></a>4. 数据分析</h2><h3 id="4-1-蔡英文主页分析"><a href="#4-1-蔡英文主页分析" class="headerlink" title="4.1. 蔡英文主页分析"></a>4.1. 蔡英文主页分析</h3><p>一共获取了蔡小姐的<strong>4120</strong>状态，对json的message字段进行提取，将所有的状态的文字保存进行词云分析，看哪些词汇出现的频率最高。</p><ol><li>首先利用Pandas对状态的结构数据进行保存；</li><li>读取Pandas表格，获取所有的状态文字；</li><li>利用jieba中文分词库，对所有的文字进行分割；</li><li>显示，保存图片；</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmsaval30qj21041taaom.jpg" alt="蔡小姐词云" title="">                </div>                <div class="image-caption">蔡小姐词云</div>            </figure><h3 id="4-2-蔡英文评论分析"><a href="#4-2-蔡英文评论分析" class="headerlink" title="4.2. 蔡英文评论分析"></a>4.2. 蔡英文评论分析</h3><p>从蔡小姐的post的所有评论当中，我找出了一条评论最多的状态，共有<strong>23630</strong>条评论，对应id为<code>46251501064_10154244975341065</code>，读取对应数据文件，利用词云分析可得</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmt0ape4h1j20b405kt9b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>看来台湾网友也十分注意<strong>安全开车</strong>，其实这条post的评论区被台湾网友刷屏了，看来怨气挺重呢，哈哈哈哈，霸屏具体内容是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.政府請正視目前台灣改裝汽機車問題！</span><br><span class="line">排氣管及改裝品可以合法製造 合法販賣 合法進口但裝載車上就不合法 這是什麼邏輯 政府要課稅又要開罰單又是什麼想法？</span><br><span class="line">排氣管或車上零件是原廠被惡意檢舉驗車那是否能跟監理單位或環保署拿今日上班請假損失？</span><br><span class="line">2.環保局 監理站 警察執法單位 專業度嚴重不足 原廠排氣管也開單 叫民眾到監理單位驗車 當做民眾都很有時間？</span><br><span class="line">3.請提供可比照國外變更車體，如重機行李箱、遮陽板、避震、制動煞車系統在不影響行車安全的部份合乎法規</span><br><span class="line">4.如民眾遭受到檢舉達人惡意檢舉，因此需要請假驗車，若屬於惡意檢舉，政府需要支付民眾請假之當天工資</span><br><span class="line">蔡??...您不是希望台灣能跟世界接軌，那請您重視汽機車改裝合法性與可變更性，在不影響行車安全與噪音的&gt; 情況下，請把檢舉改裝還於司法單位執行，才不構成擾民。</span><br></pre></td></tr></table></figure></p><p>既然这条被刷屏了，那就换成最新的一篇post，看看网友又关心啥问题。。。<br>截止爬取脸书时，最新一条博客是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你有吃過越南生春捲、香蘭娘惹糕或是薑黃飯嗎？它們是來自東南亞各國的美食，現在也是台灣的美食。</span><br><span class="line">今天是國際移民日，前幾天，我邀請了幾位新移民的好朋友來到總統府，一起準備午餐。在這場午餐的約會中，他們和我分享來到台灣生活的點點滴滴，也給我很多建議。</span><br><span class="line">謝謝你們來到台灣，讓我們的社會更多元、更茁壯。祝大家國際移民日快樂！</span><br><span class="line">#留言告訴我你最喜歡的新南向美食</span><br><span class="line">#晚餐文&quot;,</span><br></pre></td></tr></table></figure><p>蔡小姐问网友喜欢吃啥美食，我们来看看网友是如何回复的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ws1.sinaimg.cn/large/c3a916a7gy1fmt0p0kbpbj218g0m8drx.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>结合最近的新党王炳忠事件，评论中出现了较多<strong>绿色恐怖、王炳忠、白色恐怖</strong>等高频词汇</p><h2 id="5-TODO"><a href="#5-TODO" class="headerlink" title="5. TODO"></a>5. TODO</h2><p>可以分析的数据还有很多，就先分析这么多了，接下来，可以对评论进行情感分析，看下网友对蔡小姐的评论是积极还是消极的多一些。不过经过这一年的时间来看，应该是消极多一点。哈哈哈</p><p>总结下来，我认为：</p><ol><li>台湾社会的认知是处于一个分裂的状态；</li><li>不少年轻人还是无脑反对大陆；</li><li>真正理性思考人太少；</li><li>不少人处于岛内的小确幸当中；</li><li>结合最近的新闻来看，猜测台湾的士兵在开战时会不会遇到<strong>为了什么而战斗</strong>的信仰问题。哈哈，一百分将军太逗啦</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python蔡英文facebook主页分析-by神奇的战士&quot;&gt;&lt;a href=&quot;#Python蔡英文facebook主页分析-by神奇的战士&quot; class=&quot;headerlink&quot; title=&quot;Python蔡英文facebook主页分析(by神奇的战士)&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux驱动器和分区的备份，使用dd命令示例</title>
    <link href="http://wangshub.github.io/2017/12/18/linux%E9%A9%B1%E5%8A%A8%E5%99%A8%E5%92%8C%E5%88%86%E5%8C%BA%E7%9A%84%E5%A4%87%E4%BB%BD%EF%BC%8C%E4%BD%BF%E7%94%A8dd%E5%91%BD%E4%BB%A4%E7%A4%BA%E4%BE%8B/"/>
    <id>http://wangshub.github.io/2017/12/18/linux驱动器和分区的备份，使用dd命令示例/</id>
    <published>2017-12-18T12:04:51.000Z</published>
    <updated>2017-12-18T12:06:29.958Z</updated>
    
    <content type="html"><![CDATA[<p>dd命令是Linux发行版非常简单的备份工具。 “dd”工具简单的拷贝标准输入到标准输出，在512字节块读取。<br>dd 命令是Linux发行版非常简单的备份工具。该“dd”工具简单的拷贝标准输入到标准输出，在512字节块读取。 用dd命令，我们可以创建整盘，磁盘驱动器等备份，下面这篇文章将帮助你学习一些有用的“dd”命令。</p><h2 id="1：创建现有分区备份"><a href="#1：创建现有分区备份" class="headerlink" title="1：创建现有分区备份"></a>1：创建现有分区备份</h2><p>以下命令将整个分区/dev/sdb1备份到/opt/sdb1.img文件。</p><p><code># dd if=/dev/sdb1 of=/opt/sdb1.img</code></p><p>样本输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16064937+0 records in</span><br><span class="line">16064937+0 records out</span><br><span class="line">8225247744 bytes (8.2 GB) copied, 123.319 s, 66.7 MB/s</span><br></pre></td></tr></table></figure></p><h2 id="2：恢复备份到其他分区"><a href="#2：恢复备份到其他分区" class="headerlink" title="2：恢复备份到其他分区"></a>2：恢复备份到其他分区</h2><p>上面 /opt/sdb1.img备份文件可以恢复到其他分区（/dev/sdb2），我们可以用以下命令恢复。</p><p><code># dd if=/opt/sdb1.img of=/dev/sdb2</code></p><p>样本输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16064937+0 records in</span><br><span class="line">16064937+0 records out</span><br><span class="line">8225247744 bytes (8.2 GB) copied, 197.688 s, 41.6 MB/s</span><br></pre></td></tr></table></figure></p><p>现在，你可以看到的/dev/sdb2 是/dev/sdb1 的翻版。</p><h2 id="3：创建与现有分区副本"><a href="#3：创建与现有分区副本" class="headerlink" title="3：创建与现有分区副本"></a>3：创建与现有分区副本</h2><p>我们可以直接从现有的分区副本来分区。以下命令将创建的/dev/sdb1 到 /dev/sdb2 的副本。</p><p><code># dd if=/dev/sdb1 of=/dev/sdb2</code></p><p>样本输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16064937+0 records in</span><br><span class="line">16064937+0 records out</span><br><span class="line">8225247744 bytes (8.2 GB) copied, 221.431 s, 37.1 MB/s</span><br></pre></td></tr></table></figure></p><h2 id="4：创建现有的硬盘克隆"><a href="#4：创建现有的硬盘克隆" class="headerlink" title="4：创建现有的硬盘克隆"></a>4：创建现有的硬盘克隆</h2><p>以下命令将复制前446个字节这是MBR从第一个磁盘到第二个磁盘。这将创建第二个磁盘引导。 。</p><p><code># dd if=/dev/sda of=/dev/sdb bs=446 count=1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1+0 records in</span><br><span class="line">1+0 records out</span><br><span class="line">446 bytes (446 B) copied, 0.00174812 s, 255 kB/s</span><br></pre></td></tr></table></figure><p>现在确保在/dev/sdb的匹配为/dev/sda的分区。一旦做到这一点，您可以使用复制每个分区：</p><p><code># dd if=/dev/sda1 of=/dev/sdb1</code></p><p><code># dd if=/dev/sda2 of=/dev/sdb2</code></p><h2 id="5：备份和恢复的MBR镜像文件"><a href="#5：备份和恢复的MBR镜像文件" class="headerlink" title="5：备份和恢复的MBR镜像文件"></a>5：备份和恢复的MBR镜像文件</h2><p>创建使用以下命令MBR的镜像文件的备份。</p><p><code># dd if=/dev/sda of=/opt/backup-mbr-sda.img bs=512 count=1</code></p><p>示例输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1+0 records in</span><br><span class="line">1+0 records out</span><br><span class="line">512 bytes (512 B) copied, 0.0115243 s, 44.4 kB/s</span><br></pre></td></tr></table></figure></p><p>接下来的步骤是MBR恢复到不同的磁盘，使用下面的命令来做到这一点。</p><p><code># dd if=/opt/backup-mbr-sda.img of=/dev/sdb bs=446 count=1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dd命令是Linux发行版非常简单的备份工具。 “dd”工具简单的拷贝标准输入到标准输出，在512字节块读取。&lt;br&gt;dd 命令是Linux发行版非常简单的备份工具。该“dd”工具简单的拷贝标准输入到标准输出，在512字节块读取。 用dd命令，我们可以创建整盘，磁盘驱动器等
      
    
    </summary>
    
    
      <category term="linux" scheme="http://wangshub.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python数字图像处理-图像噪声与去噪算法</title>
    <link href="http://wangshub.github.io/2017/12/16/python%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E5%9B%BE%E5%83%8F%E5%99%AA%E5%A3%B0%E4%B8%8E%E5%8E%BB%E5%99%AA%E7%AE%97%E6%B3%95/"/>
    <id>http://wangshub.github.io/2017/12/16/python数字图像处理-图像噪声与去噪算法/</id>
    <published>2017-12-16T09:19:29.000Z</published>
    <updated>2017-12-16T09:33:26.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python数字图像处理-图像噪声与去噪算法"><a href="#python数字图像处理-图像噪声与去噪算法" class="headerlink" title="python数字图像处理-图像噪声与去噪算法"></a>python数字图像处理-图像噪声与去噪算法</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e6accc01f.png" alt="figure_1.png" title="">                </div>                <div class="image-caption">figure_1.png</div>            </figure><h2 id="图像噪声"><a href="#图像噪声" class="headerlink" title="图像噪声"></a>图像噪声</h2><h3 id="椒盐噪声"><a href="#椒盐噪声" class="headerlink" title="椒盐噪声"></a>椒盐噪声</h3><p><strong>概述：</strong> 椒盐噪声（salt &amp; pepper noise）是数字图像的一个常见噪声，所谓椒盐，椒就是黑，盐就是白，椒盐噪声就是在图像上随机出现黑色白色的像素。椒盐噪声是一种因为信号脉冲强度引起的噪声，产生该噪声的算法也比较简单。</p><p>给一副数字图像加上椒盐噪声的步骤如下：</p><ol><li>指定信噪比 SNR （其取值范围在[0, 1]之间）</li><li>计算总像素数目 SP， 得到要加噪的像素数目 NP = SP * (1-SNR)</li><li>随机获取要加噪的每个像素位置P（i, j）</li><li>指定像素值为255或者0。</li><li>重复3,4两个步骤完成所有像素的NP个像素</li><li>输出加噪以后的图像</li></ol><h3 id="高斯噪声"><a href="#高斯噪声" class="headerlink" title="高斯噪声"></a>高斯噪声</h3><p><strong>概述：</strong> 加性高斯白噪声(Additive white Gaussian noise，AWGN)在通信领域中指的是一种功率谱函数是常数(即白噪声), 且幅度服从高斯分布的噪声信号. 这类噪声通常来自感光元件, 且无法避免.</p><h2 id="去噪算法"><a href="#去噪算法" class="headerlink" title="去噪算法"></a>去噪算法</h2><h3 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a>中值滤波</h3><p><strong>概述：</strong> 中值滤波是一种非线性空间滤波器, 它的响应基于图像滤波器包围的图像区域中像素的统计排序, 然后由统计排序结果的值代替中心像素的值. 中值滤波器将其像素邻域内的灰度中值代替代替该像素的值. 中值滤波器的使用非常普遍, 这是因为对于一定类型的随机噪声, 它提供了一种优秀的去噪能力, 比小尺寸的均值滤波器模糊程度明显要低. 中值滤波器对处理脉冲噪声(也称椒盐噪声)非常有效, 因为该噪声是以黑白点叠加在图像上面的.</p><p>与中值滤波相似的还有最大值滤波器和最小值滤波器.</p><h3 id="均值滤波"><a href="#均值滤波" class="headerlink" title="均值滤波"></a>均值滤波</h3><p><strong>概述：</strong> 均值滤波器的输出是包含在滤波掩模领域内像素的简单平均值. 均值滤波器最常用的目的就是减噪. 然而, 图像边缘也是由图像灰度尖锐变化带来的特性, 所以均值滤波还是存在不希望的边缘模糊负面效应.</p><p>均值滤波还有一个重要应用, 为了对感兴趣的图像得出一个粗略描述而模糊一幅图像. 这样, 那些较小物体的强度与背景揉合在一起了, 较大物体变得像斑点而易于检测.掩模的大小由即将融入背景中的物体尺寸决定.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>见<a href="https://github.com/wangshub/python-image-process" target="_blank" rel="noopener">https://github.com/wangshub/python-image-process</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python数字图像处理-图像噪声与去噪算法&quot;&gt;&lt;a href=&quot;#python数字图像处理-图像噪声与去噪算法&quot; class=&quot;headerlink&quot; title=&quot;python数字图像处理-图像噪声与去噪算法&quot;&gt;&lt;/a&gt;python数字图像处理-图像噪声与去噪
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
      <category term="algorithm" scheme="http://wangshub.github.io/tags/algorithm/"/>
    
      <category term="image" scheme="http://wangshub.github.io/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>python数字图像处理-图像的基本结构和基础知识</title>
    <link href="http://wangshub.github.io/2017/12/16/python%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86-%E5%9B%BE%E5%83%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://wangshub.github.io/2017/12/16/python数字图像处理-图像的基本结构和基础知识/</id>
    <published>2017-12-16T09:10:39.000Z</published>
    <updated>2017-12-16T09:18:39.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字图像处理-图像的基本结构和基础知识"><a href="#数字图像处理-图像的基本结构和基础知识" class="headerlink" title="数字图像处理-图像的基本结构和基础知识"></a>数字图像处理-图像的基本结构和基础知识</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e2a04b0bc.bmp" alt="LenaRGB.bmp" title="">                </div>                <div class="image-caption">LenaRGB.bmp</div>            </figure><h2 id="一、python实现BMP图像的读取和显示"><a href="#一、python实现BMP图像的读取和显示" class="headerlink" title="一、python实现BMP图像的读取和显示"></a>一、python实现BMP图像的读取和显示</h2><p>BMP文件格式，又称为Bitmap（位图）或是DIB(Device-Independent Device，设备无关位图)，是Windows系统中广泛使用的图像文件格式。由于它可以不作任何变换地保存图像像素域的数据，因此成为我们取得RAW数据的重要来源。Windows的图形用户界面（graphical user interfaces）也在它的内建图像子系统GDI中对BMP格式提供了支持。</p><p>BMP文件的数据按照从文件头开始的先后顺序分为四个部分：</p><ol><li><p><strong>bmp文件头(bmp file header)</strong> ：提供文件的格式、大小等信息</p></li><li><p><strong>位图信息头(bitmap information)</strong>：提供图像数据的尺寸、位平面数、压缩方式、颜色索引等信息</p></li><li><p><strong>调色板(color palette)</strong>：可选，如使用索引来表示图像，调色板就是索引与其对应的颜色的映射表</p></li><li><p><strong>位图数据(bitmap data)</strong>：就是图像数据</p></li></ol><blockquote><p>参考链接<br><a href="https://zh.wikipedia.org/wiki/BMP" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/BMP</a></p></blockquote><h2 id="二、python统计图像的直方图"><a href="#二、python统计图像的直方图" class="headerlink" title="二、python统计图像的直方图"></a>二、python统计图像的直方图</h2><p><strong>图像直方图</strong>（英语：Image Histogram）是用以表示数字图像中亮度分布的直方图，标绘了图像中每个亮度值的像素数。可以借助观察该直方图了解需要如何调整亮度分布。这种直方图中，横坐标的左侧为纯黑、较暗的区域，而右侧为较亮、纯白的区域。因此，一张较暗图片的图像直方图中的数据多集中于左侧和中间部分；而整体明亮、只有少量阴影的图像则相反。<br>很多数码相机提供图像直方图功能，拍摄者可以通过观察图像直方图了解到当前图像是否过分曝光或者曝光不足。<br>计算机视觉领域常借助图像直方图来实现图像的二值化</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e49c0fd38.png" alt="2 统计直方图.png" title="">                </div>                <div class="image-caption">2 统计直方图.png</div>            </figure><blockquote><p>参考链接<br><a href="https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE#%E5%9B%BE%E5%83%8F%E7%9B%B4%E6%96%B9%E5%9B%BE" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E7%9B%B4%E6%96%B9%E5%9B%BE#%E5%9B%BE%E5%83%8F%E7%9B%B4%E6%96%B9%E5%9B%BE</a></p></blockquote><h2 id="三、RGB、YIQ、HSI、XYZ颜色空间"><a href="#三、RGB、YIQ、HSI、XYZ颜色空间" class="headerlink" title="三、RGB、YIQ、HSI、XYZ颜色空间"></a>三、RGB、YIQ、HSI、XYZ颜色空间</h2><h3 id="YIQ"><a href="#YIQ" class="headerlink" title="YIQ"></a>YIQ</h3><p>YIQ色彩空间通常被北美的电视系统所采用，属于NTSC（National Television Standards Committee）系统。这里Y不是指黄色，而是指颜色的明视度（Luminance），即亮度（Brightness）。其实Y就是图像的灰度值（Gray value），而I和Q则是指色调（Chrominance），即描述图像色彩及饱和度的属性。在YIQ系统中，Y分量代表图像的亮度信息，I、Q两个分量则携带颜色信息，I分量代表从橙色到青色的颜色变化，而Q分量则代表从紫色到黄绿色的颜色变化。</p><p>NTSC制为了进一步压缩色度带宽，用色差信号I,Q来代替U,V。若采用U,V色差信号，则色度、亮度信号的共频带部分极大，低端不共频带的亮度信号带宽很小，亮、色干扰大。将彩色图像从RGB转换到YIQ色彩空间，可以把彩色图像中的亮度信息与色度信息分开，分别独立进行处理。</p><p>RGB和YIQ的对应关系用下面的方程式表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Y=0.299R+0.587G+0.114B</span><br><span class="line">I=0.596R-0.274G-0.322B</span><br><span class="line">Q=0.211R-0.523G+0.312B</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e49c3a072.png" alt="3 YIQ分量.png" title="">                </div>                <div class="image-caption">3 YIQ分量.png</div>            </figure><h3 id="HSI"><a href="#HSI" class="headerlink" title="HSI"></a>HSI</h3><ul><li><p>色调H（Hue）：与光波的波长有关，它表示人的感官对不同颜色的感受，如红色、绿色、蓝色等，它也可表示一定范围的颜色，如暖色、冷色等。</p></li><li><p>饱和度S（Saturation）：表示颜色的纯度，纯光谱色是完全饱和的，加入白光会稀释饱和度。饱和度越大，颜色看起来就会越鲜艳，反之亦然。</p></li><li><p>亮度I（Intensity）：对应成像亮度和图像灰度，是颜色的明亮程度。<br>若将RGB单位立方体沿主对角线进行投影，可得到六边形，这样，原来沿主对角线的灰色都投影到中心白色点，而红色点（1，0，0）则位于右边的角上，绿色点（0，1，0）位于左上角，蓝色点（0，0，1）则位于左下角。</p></li></ul><p>HSI颜色模型的双六棱锥表示，I是强度轴，色调H的角度范围为[0，2π]，其中，纯红色的角度为0，纯绿色的角度为2π/3，纯蓝色的角度为4π/3。饱和度S是颜色空间任一点距I轴的距离。当然，若用圆表示RGB模型的投影，则HSI色度空间为双圆锥3D表示。</p><p>注意： 当强度I=0时，色调H、饱和度S无定义；当S=0时，色调H无定义。<br>HSI模型也可用圆柱来表示，如图9-5所示。若将其展开，并按图9-6进行定义，可得到HSI调色板。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e15929e62.jpg" alt="HSI_Formula.jpg" title="">                </div>                <div class="image-caption">HSI_Formula.jpg</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e49c37be5.png" alt="5 HSI分量.png" title="">                </div>                <div class="image-caption">5 HSI分量.png</div>            </figure><h3 id="XYZ"><a href="#XYZ" class="headerlink" title="XYZ"></a>XYZ</h3><p>国际照明委员会(CIE)在进行了大量正常人视觉测量和统计,1931年建立了”标准色度观察者”， 从而奠定了现代CIE标准色度学的定量基础。由于”标准色度观察者”用来标定光谱色时出现负 刺激值，计算不便，也不易理解，因此1931年CIE在RGB系统基础上，改用三个假想的原色X、Y、 Z建立了一个新的色度系统。将它匹配等能光谱的三刺激值，定名为”CIE1931 标准色度观察者 光谱三刺激值”，简称为”CIE1931标准色度观察者”。这一系统叫做”CIE1931标准色度系统”或称为” 2° 视场XYZ色度系统”。CIEXYZ颜色空间稍加变换就可得到Yxy色彩空间，其中Y取三刺激值中Y的值， 表示亮度，x、y反映颜色的色度特性。定义如下：在色彩管理中，选择与设备无关的颜色空间是 十分重要的，与设备无关的颜色空间由国际照明委员会(CIE)制定，包括CIEXYZ和CIELAB两个标准。 它们包含了人眼所能辨别的全部颜色。而且，CIEYxy测色制的建立给定量的确定颜色创造了条件。 但是，在这一空间中，两种不同颜色之间的距离值并不能正确地反映人们色彩感觉差别的大小， 也就是说在CIEYxy色厦图中，在 不同的位置不同方向上颜色的宽容量是不同的，这就是Yxy颜色空间 的不均匀性。这一缺陷的存在，使得在Yxy及XYZ空间不能直观地评价颜色。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e26b25e70.jpg" alt="xyz.jpg" title="">                </div>                <div class="image-caption">xyz.jpg</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2017/12/16/5a34e49c3b8d4.png" alt="6 XYZ分量.png" title="">                </div>                <div class="image-caption">6 XYZ分量.png</div>            </figure><h2 id="四、python代码实现"><a href="#四、python代码实现" class="headerlink" title="四、python代码实现"></a>四、python代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_bmp</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment"># BMP 的读取与显示</span></span><br><span class="line">    plt.figure(<span class="string">"LenaRGB.bmp"</span>)</span><br><span class="line">    plt.title(<span class="string">"LenaRGB.bmp"</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_hist</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment"># 直方图</span></span><br><span class="line">    plt.figure(<span class="string">"Lena hist"</span>)</span><br><span class="line">    plt.title(<span class="string">'Lena hist figure'</span>)</span><br><span class="line">    arr = img.flatten()</span><br><span class="line">    n, bins, patches = plt.hist(arr, bins=<span class="number">256</span>, normed=<span class="number">1</span>, facecolor=<span class="string">'green'</span>, alpha=<span class="number">0.75</span>)  </span><br><span class="line">    plt.show()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_rgb</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment"># 显示RGB图像    </span></span><br><span class="line">    plt.subplot(<span class="number">221</span>)</span><br><span class="line">    plt.title(<span class="string">'orignal'</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.subplot(<span class="number">222</span>)</span><br><span class="line">    plt.title(<span class="string">'R'</span>)</span><br><span class="line">    plt.imshow(img[:, :, <span class="number">0</span>], cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">223</span>)</span><br><span class="line">    plt.title(<span class="string">'G'</span>)</span><br><span class="line">    plt.imshow(img[:, :, <span class="number">1</span>], cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">224</span>)</span><br><span class="line">    plt.title(<span class="string">'B'</span>)</span><br><span class="line">    plt.imshow(img[:, :, <span class="number">2</span>], cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shou_yiq</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment"># 显示YIQ分量</span></span><br><span class="line">    R = np.mat(img[:, :, <span class="number">0</span>])</span><br><span class="line">    G = np.mat(img[:, :, <span class="number">1</span>])</span><br><span class="line">    B = np.mat(img[:, :, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># aH = np.array([(0.299, 0.587, 0.114), </span></span><br><span class="line">    <span class="comment">#               (0.596, -0.274, -0.322), </span></span><br><span class="line">    <span class="comment">#               (0.211, -0.523, 0.312)])</span></span><br><span class="line">    Y = <span class="number">0.299</span> * R + <span class="number">0.587</span> * G + <span class="number">0.114</span> * B</span><br><span class="line">    I = <span class="number">0.596</span> * R - <span class="number">0.274</span> * G - <span class="number">0.322</span> * B</span><br><span class="line">    Q = <span class="number">0.211</span> * R - <span class="number">0.523</span> * G - <span class="number">0.312</span> * B</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">221</span>)</span><br><span class="line">    plt.title(<span class="string">'orignal'</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.subplot(<span class="number">222</span>)</span><br><span class="line">    plt.title(<span class="string">'Y'</span>)</span><br><span class="line">    plt.imshow(Y, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">223</span>)</span><br><span class="line">    plt.title(<span class="string">'I'</span>)</span><br><span class="line">    plt.imshow(I, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">224</span>)</span><br><span class="line">    plt.title(<span class="string">'Q'</span>)</span><br><span class="line">    plt.imshow(Q, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="comment"># YIQ = </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_xyz</span><span class="params">(img)</span>:</span></span><br><span class="line">    <span class="comment"># 显示YIQ分量</span></span><br><span class="line">    R = np.mat(img[:, :, <span class="number">0</span>])</span><br><span class="line">    G = np.mat(img[:, :, <span class="number">1</span>])</span><br><span class="line">    B = np.mat(img[:, :, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># aH = np.array([(0.299, 0.587, 0.114), </span></span><br><span class="line">    <span class="comment">#               (0.596, -0.274, -0.322), </span></span><br><span class="line">    <span class="comment">#               (0.211, -0.523, 0.312)])</span></span><br><span class="line">    X = <span class="number">0.490</span> * R + <span class="number">0.310</span> * G + <span class="number">0.200</span> * B</span><br><span class="line">    Y = <span class="number">0.177</span> * R + <span class="number">0.813</span> * G + <span class="number">0.011</span> * B</span><br><span class="line">    Z = <span class="number">0.000</span> * R + <span class="number">0.010</span> * G + <span class="number">0.990</span> * B</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">221</span>)</span><br><span class="line">    plt.title(<span class="string">'orignal'</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.subplot(<span class="number">222</span>)</span><br><span class="line">    plt.title(<span class="string">'X'</span>)</span><br><span class="line">    plt.imshow(X, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">223</span>)</span><br><span class="line">    plt.title(<span class="string">'Y'</span>)</span><br><span class="line">    plt.imshow(Y, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">224</span>)</span><br><span class="line">    plt.title(<span class="string">'Z'</span>)</span><br><span class="line">    plt.imshow(Z, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_hsi</span><span class="params">(img)</span>:</span></span><br><span class="line">    rows, cols, dims = img.shape </span><br><span class="line">    R = np.mat(img[:, :, <span class="number">0</span>])</span><br><span class="line">    G = np.mat(img[:, :, <span class="number">1</span>])</span><br><span class="line">    B = np.mat(img[:, :, <span class="number">2</span>])</span><br><span class="line">    </span><br><span class="line">    I = (R + G + B) / <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    E = np.mat(np.ones([rows, cols]))</span><br><span class="line">    minRGB = np.mat(img.min(<span class="number">2</span>))</span><br><span class="line">    lv = <span class="number">3</span> * E / (R + G + B)</span><br><span class="line">    S = E - np.multiply(lv, minRGB)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># S = np.mat(np.zeros([rows, cols]))</span></span><br><span class="line">    <span class="comment"># for i in range(rows):</span></span><br><span class="line">    <span class="comment">#     for j in range(cols):</span></span><br><span class="line">    <span class="comment">#         S[i, j] = 1 - 3/(R[i, j] + G[i, j] + B[i, j]) * min([R[i, j], G[i, j], B[i, j]])</span></span><br><span class="line"></span><br><span class="line">    H = np.mat(np.zeros([rows, cols]))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(rows):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(cols):</span><br><span class="line">            up = (R[i, j] - G[i, j] + R[i, j] - B[i, j]) / <span class="number">2</span></span><br><span class="line">            down = (R[i, j] - G[i, j])**<span class="number">2</span> + (R[i, j] - B[i, j]) * (G[i, j] - B[i, j])**<span class="number">0.5</span></span><br><span class="line">            H[i, j] = math.acos(up / down)</span><br><span class="line">            </span><br><span class="line">    plt.subplot(<span class="number">221</span>)</span><br><span class="line">    plt.title(<span class="string">'orignal'</span>)</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.subplot(<span class="number">222</span>)</span><br><span class="line">    plt.title(<span class="string">'I'</span>)</span><br><span class="line">    plt.imshow(I, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">223</span>)</span><br><span class="line">    plt.title(<span class="string">'S'</span>)</span><br><span class="line">    plt.imshow(S, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.subplot(<span class="number">224</span>)</span><br><span class="line">    plt.title(<span class="string">'H'</span>)</span><br><span class="line">    plt.imshow(H, cmap=<span class="string">'gray'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    img = np.array(Image.open(<span class="string">'/home/sun/Desktop/PycharmProjects/Digital_image_process_lxk/lab1/LenaRGB.bmp'</span>))</span><br><span class="line">    rows, cols, dims = img.shape</span><br><span class="line">    <span class="keyword">print</span> img.shape  </span><br><span class="line">    <span class="keyword">print</span> img.dtype </span><br><span class="line">    <span class="keyword">print</span> img.size </span><br><span class="line">    <span class="keyword">print</span> type(img)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># show_bmp(img)</span></span><br><span class="line">    <span class="comment"># show_hist(img)</span></span><br><span class="line">    <span class="comment"># show_rgb(img)</span></span><br><span class="line">    <span class="comment"># shou_yiq(img)</span></span><br><span class="line">    <span class="comment"># show_hsi(img)</span></span><br><span class="line">    <span class="comment"># show_xyz(img)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字图像处理-图像的基本结构和基础知识&quot;&gt;&lt;a href=&quot;#数字图像处理-图像的基本结构和基础知识&quot; class=&quot;headerlink&quot; title=&quot;数字图像处理-图像的基本结构和基础知识&quot;&gt;&lt;/a&gt;数字图像处理-图像的基本结构和基础知识&lt;/h1&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
      <category term="algorithm" scheme="http://wangshub.github.io/tags/algorithm/"/>
    
      <category term="image" scheme="http://wangshub.github.io/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>python：将图片转换成excel文档</title>
    <link href="http://wangshub.github.io/2017/12/14/image-to-excel/"/>
    <id>http://wangshub.github.io/2017/12/14/image-to-excel/</id>
    <published>2017-12-14T13:28:12.000Z</published>
    <updated>2017-12-14T13:37:39.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python：将图片转换成excel文档"><a href="#python：将图片转换成excel文档" class="headerlink" title="python：将图片转换成excel文档"></a>python：将图片转换成excel文档</h1><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx1.sinaimg.cn/large/c3a916a7gy1fmgmi7aqirj20dd09zmy2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>读取图像，获取图像每个像素点的RGB值；</li><li>根据每个像素点的RGB值设置excel每个方格的颜色值；</li><li>根据像素点的坐标，写入excel文件；</li><li>保存退出；</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_xy</span><span class="params">(row, col)</span>:</span></span><br><span class="line">    table = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">    num1 = col / <span class="number">26</span></span><br><span class="line">    num2 = col % <span class="number">26</span></span><br><span class="line">    <span class="comment"># print num1, num2</span></span><br><span class="line">    <span class="keyword">if</span> num1 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> table[num2 - <span class="number">1</span>] + str(row)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> table[num1<span class="number">-1</span>] + table[num2 - <span class="number">1</span>] + str(row)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    img = np.array(Image.open(<span class="string">'whale.jpeg'</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># plt.figure("whale")</span></span><br><span class="line">    <span class="comment"># plt.imshow(img)</span></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line">    rows, cols, dims = img.shape</span><br><span class="line">    <span class="keyword">print</span> img.shape  </span><br><span class="line">    <span class="keyword">print</span> img.dtype </span><br><span class="line">    <span class="keyword">print</span> img.size </span><br><span class="line">    <span class="keyword">print</span> type(img)</span><br><span class="line">    <span class="comment"># print img[188, 188, 0]</span></span><br><span class="line"></span><br><span class="line">    excel = xlsxwriter.Workbook(<span class="string">'image_excel.xlsx'</span>)</span><br><span class="line">    cellformat = excel.add_format(&#123;<span class="string">'bg_color'</span>: <span class="string">'#123456'</span>,</span><br><span class="line">                                   <span class="string">'font_color'</span>: <span class="string">'#654321'</span>&#125;)</span><br><span class="line">    worksheet1 = excel.add_worksheet()</span><br><span class="line"></span><br><span class="line">    data = []</span><br><span class="line">    color = [<span class="string">''</span>] * cols</span><br><span class="line">    cellcolor = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(rows):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(cols):</span><br><span class="line">            <span class="comment"># print hex(img[i, j, 0]), hex(img[i, j, 1]), hex(img[i, j, 2])</span></span><br><span class="line">            cellcolor = (hex(img[i, j, <span class="number">0</span>]) + hex(img[i, j, <span class="number">1</span>]) + hex(img[i, j, <span class="number">2</span>])).replace(<span class="string">'0x'</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="comment"># print cellcolor</span></span><br><span class="line">           </span><br><span class="line">            cellformat = excel.add_format(&#123;<span class="string">'bg_color'</span>: <span class="string">'#'</span>+cellcolor, </span><br><span class="line">                                           <span class="string">'font_color'</span>: <span class="string">'#'</span>+cellcolor&#125;)</span><br><span class="line">           </span><br><span class="line">            <span class="comment"># cellformat = excel.add_format(&#123;'bg_color': '#C6EFCE', </span></span><br><span class="line">            <span class="comment">#                                'font_color': '#006100'&#125;)</span></span><br><span class="line">            </span><br><span class="line">            worksheet1.conditional_format(get_xy(i, j), &#123;<span class="string">'type'</span>: <span class="string">'cell'</span>,</span><br><span class="line">                                                        <span class="string">'criteria'</span>: <span class="string">'&lt;'</span>,</span><br><span class="line">                                                        <span class="string">'value'</span>: <span class="number">50</span>,</span><br><span class="line">                                                        <span class="string">'format'</span>: cellformat&#125;)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># data.append(data_row)</span></span><br><span class="line">    excel.close()    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="comment"># print get_xy(133, 27)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python：将图片转换成excel文档&quot;&gt;&lt;a href=&quot;#python：将图片转换成excel文档&quot; class=&quot;headerlink&quot; title=&quot;python：将图片转换成excel文档&quot;&gt;&lt;/a&gt;python：将图片转换成excel文档&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python check hosts update</title>
    <link href="http://wangshub.github.io/2017/07/20/python-check-hosts-update/"/>
    <id>http://wangshub.github.io/2017/07/20/python-check-hosts-update/</id>
    <published>2017-07-20T14:33:15.000Z</published>
    <updated>2017-07-20T14:45:58.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用Python检查-hosts-更新"><a href="#用Python检查-hosts-更新" class="headerlink" title="用Python检查 hosts 更新"></a>用Python检查 <em>hosts</em> 更新</h1><p>最近各种代理纷纷关闭，常见的翻墙方式就剩lantern和更改hosts的方式依旧坚挺，关注了一些更新hosts的git仓库，但是又不想登录网页查看原作者是否有更新。所以这种苦力活就让Python干好了。</p><h2 id="hosts地址"><a href="#hosts地址" class="headerlink" title="hosts地址"></a>hosts地址</h2><p>_hosts<em>info.py</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hosts_source = [<span class="string">"https://raw.githubusercontent.com/racaljk/hosts/master/hosts"</span>]</span><br></pre></td></tr></table></figure></p><h2 id="检查hosts是否有更新"><a href="#检查hosts是否有更新" class="headerlink" title="检查hosts是否有更新"></a>检查hosts是否有更新</h2><p>_check<em>hosts.py</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">from</span> .hosts_info <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> filecmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hosts_download</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">'hosts'</span>):</span><br><span class="line">        hosts_name = <span class="string">'hosts_new'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hosts_name = <span class="string">'hosts'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">todo:</span> overtime detection</span></span><br><span class="line">    f = urllib2.urlopen(hosts_source[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"downloading hosts"</span></span><br><span class="line">    <span class="keyword">with</span> open(hosts_name, <span class="string">"wb"</span>) <span class="keyword">as</span> code:</span><br><span class="line">       code.write(f.read())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_hosts_new</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    hosts_download()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'hosts'</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'oops, hosts not exists'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> os.path.exists(<span class="string">'hosts'</span>) <span class="keyword">and</span> (<span class="keyword">not</span> os.path.exists(<span class="string">'hosts_new'</span>)):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'first run, only one hosts file'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> os.path.exists(<span class="string">'hosts'</span>) <span class="keyword">and</span> (os.path.exists(<span class="string">'hosts_new'</span>)):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'compare hosts &amp; hosts_new'</span></span><br><span class="line">        diff_status = filecmp.cmp(<span class="string">'hosts'</span>, <span class="string">'hosts_new'</span>)</span><br><span class="line">        <span class="keyword">if</span> diff_status:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'same file'</span></span><br><span class="line">            os.remove(<span class="string">'hosts_new'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'diff file'</span></span><br><span class="line">            os.remove(<span class="string">'hosts'</span>)</span><br><span class="line">            os.rename(<span class="string">'hosts_new'</span>, <span class="string">"hosts"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></p><h2 id="主程序调用"><a href="#主程序调用" class="headerlink" title="主程序调用"></a>主程序调用</h2><p><em>main.py</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> check_hosts.check_hosts <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">diff_status = is_hosts_new()</span><br><span class="line"><span class="keyword">if</span> diff_status:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"new hosts !"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'code: '</span>,diff_status</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用Python检查-hosts-更新&quot;&gt;&lt;a href=&quot;#用Python检查-hosts-更新&quot; class=&quot;headerlink&quot; title=&quot;用Python检查 hosts 更新&quot;&gt;&lt;/a&gt;用Python检查 &lt;em&gt;hosts&lt;/em&gt; 更新&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Python" scheme="http://wangshub.github.io/categories/Python/"/>
    
      <category term="VPN" scheme="http://wangshub.github.io/categories/Python/VPN/"/>
    
    
      <category term="Python" scheme="http://wangshub.github.io/tags/Python/"/>
    
      <category term="VPN" scheme="http://wangshub.github.io/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>python mail sender</title>
    <link href="http://wangshub.github.io/2017/07/20/python-mail-sender/"/>
    <id>http://wangshub.github.io/2017/07/20/python-mail-sender/</id>
    <published>2017-07-20T14:22:06.000Z</published>
    <updated>2017-07-20T14:30:11.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-发送邮件"><a href="#python-发送邮件" class="headerlink" title="python 发送邮件"></a>python 发送邮件</h1><h2 id="配置服务器和邮箱"><a href="#配置服务器和邮箱" class="headerlink" title="配置服务器和邮箱"></a>配置服务器和邮箱</h2><blockquote><p>mail_info.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mail_host = <span class="string">'smtp.yeah.net'</span></span><br><span class="line">mail_user = <span class="string">'mail_name'</span></span><br><span class="line">mail_pass = <span class="string">'mail_password'</span></span><br><span class="line"></span><br><span class="line">sender = <span class="string">'mail_name@yeah.net'</span></span><br><span class="line">receivers = [<span class="string">'target@mail.com'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><blockquote><p>mail_trans.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .mail_info <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mail_text_send</span><span class="params">(title, text)</span>:</span></span><br><span class="line">    message = MIMEText(text, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'Subject'</span>] = title</span><br><span class="line">    message[<span class="string">'From'</span>] = sender</span><br><span class="line">    message[<span class="string">'To'</span>] = receivers[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        smtpObj = smtplib.SMTP()</span><br><span class="line">        <span class="comment"># connect host</span></span><br><span class="line">        smtpObj.connect(mail_host, <span class="number">25</span>)</span><br><span class="line">        <span class="comment"># login host</span></span><br><span class="line">        smtpObj.login(mail_user, mail_pass)</span><br><span class="line">        <span class="comment"># send</span></span><br><span class="line">        smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line">        <span class="comment"># quit</span></span><br><span class="line">        smtpObj.quit()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> smtplib.SMTPException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="主程序调用"><a href="#主程序调用" class="headerlink" title="主程序调用"></a>主程序调用</h2><blockquote><p>main.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mail_trans <span class="keyword">import</span> *</span><br><span class="line">mail_text_send(<span class="string">'title'</span>, <span class="string">'hello world!'</span>)</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-发送邮件&quot;&gt;&lt;a href=&quot;#python-发送邮件&quot; class=&quot;headerlink&quot; title=&quot;python 发送邮件&quot;&gt;&lt;/a&gt;python 发送邮件&lt;/h1&gt;&lt;h2 id=&quot;配置服务器和邮箱&quot;&gt;&lt;a href=&quot;#配置服务器和邮箱&quot;
      
    
    </summary>
    
      <category term="Python" scheme="http://wangshub.github.io/categories/Python/"/>
    
      <category term="Code" scheme="http://wangshub.github.io/categories/Python/Code/"/>
    
      <category term="Mail" scheme="http://wangshub.github.io/categories/Python/Code/Mail/"/>
    
    
      <category term="Code" scheme="http://wangshub.github.io/tags/Code/"/>
    
      <category term="Python" scheme="http://wangshub.github.io/tags/Python/"/>
    
      <category term="Mail" scheme="http://wangshub.github.io/tags/Mail/"/>
    
  </entry>
  
  <entry>
    <title>使用python备份博客图床图片</title>
    <link href="http://wangshub.github.io/2017/06/05/use-python-to-backup-markdown-images/"/>
    <id>http://wangshub.github.io/2017/06/05/use-python-to-backup-markdown-images/</id>
    <published>2017-06-05T15:09:29.000Z</published>
    <updated>2017-06-05T15:31:18.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>最近在写markdown文档的过程中,经常需要插入一些图片.因为托管博客的服务器空间有限,所以上传图片到图床再插入到markdown中.有时候又插入网上的图片,这些图片随时可能失效.导致我的博客网站显示图片错误.<br><br>所以花了一点时间,用python <em>正则匹配</em> markdown中图片链接,然后下载图片保存到本地文件夹<code>img</code>中.这样就不用担心图片失效啦,当我找到稳定的图床,可以随时把这些图片再上传更新,美滋滋~~~</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul><li style="list-style: none"><input type="checkbox" checked> <code>.md</code>文件自动搜索</li><li style="list-style: none"><input type="checkbox" checked> 正则匹配图片链接</li><li style="list-style: none"><input type="checkbox" checked> 爬取图片内容</li><li style="list-style: none"><input type="checkbox" checked> 保存文本到本地</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p><strong>读取文件</strong> =&gt; <strong>正则匹配</strong> =&gt; <strong>图片下载</strong> =&gt; <strong>保存本地</strong></p><h1 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h1><p>详细见我的github地址: www.github.com/wangshub</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(path, word)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        fp = os.path.join(path, filename)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(fp) <span class="keyword">and</span> word <span class="keyword">in</span> filename:</span><br><span class="line">            <span class="keyword">print</span> fp</span><br><span class="line">            download(str(fp))</span><br><span class="line">        <span class="keyword">elif</span> os.path.isdir(fp):</span><br><span class="line">            search(fp, word)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    <span class="comment"># filename = "test"</span></span><br><span class="line">    name = file_path.split(<span class="string">u"/"</span>)</span><br><span class="line">    filename = name[<span class="number">-1</span>]</span><br><span class="line">    f_md = open(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># all text of md file</span></span><br><span class="line">    text = f_md.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># regex</span></span><br><span class="line">    img_reg = <span class="string">r'\!&#123;1&#125;\[(.*?)\]\((.*?)\)'</span></span><br><span class="line">    result = re.findall(<span class="string">'!\[(.*)\]\((.*)\)'</span>, text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">        img_quote = result[i][<span class="number">0</span>]</span><br><span class="line">        img_url = result[i][<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># download img</span></span><br><span class="line">        request = urllib2.Request(img_url)</span><br><span class="line">        response = urllib2.urlopen(request)</span><br><span class="line">        img_contents = response.read()</span><br><span class="line">        <span class="comment"># img name spell</span></span><br><span class="line">        urlname = img_url.split(<span class="string">u"/"</span>)</span><br><span class="line">        img_name = filename + <span class="string">'_'</span> + \</span><br><span class="line">            str(i) + <span class="string">'_'</span> + img_quote + str(urlname[len(urlname) - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">print</span> img_name, <span class="string">'~~~'</span>, img_url</span><br><span class="line">        <span class="comment"># write to file</span></span><br><span class="line">        f_img = open(<span class="string">'img/'</span> + img_name, <span class="string">'wb'</span>)</span><br><span class="line">        f_img.write(img_contents)</span><br><span class="line">        f_img.close()</span><br><span class="line">    f_md.close()</span><br><span class="line"></span><br><span class="line">search(sys.argv[<span class="number">1</span>], <span class="string">'.md'</span>)</span><br></pre></td></tr></table></figure><h1 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h1><p><code>python md_image_bacup.py /path/to/your/file/</code></p><h1 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h1><blockquote><p>Author : <em>WangSong</em><br><br>E-mail : <em>easternslope@yeah.net</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;最近在写markdown文档的过程中,经常需要插入一些图片.因为托管博客的服务器空间有限,所以上传图片到
      
    
    </summary>
    
      <category term="python" scheme="http://wangshub.github.io/categories/python/"/>
    
      <category term="markdown" scheme="http://wangshub.github.io/categories/python/markdown/"/>
    
      <category term="code" scheme="http://wangshub.github.io/categories/python/markdown/code/"/>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
      <category term="code" scheme="http://wangshub.github.io/tags/code/"/>
    
      <category term="markdown" scheme="http://wangshub.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>从机sshfs访问主机文件系统</title>
    <link href="http://wangshub.github.io/2017/05/31/sshfs-mount-net-disk/"/>
    <id>http://wangshub.github.io/2017/05/31/sshfs-mount-net-disk/</id>
    <published>2017-05-31T13:16:00.000Z</published>
    <updated>2017-05-31T14:57:30.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>需要在PC主机(Linux)上编写代码,每次都要将代码拷贝到从机(Linux)上编译运行程序.这里用到<code>scp</code>命令 <code>scp -r /主机/文件 从机名@192.168.x.x:从机目录/</code>.利用<code>sshfs</code>可以直接在从机进行编译,省略拷贝步骤.</p><h1 id="系统结构框图"><a href="#系统结构框图" class="headerlink" title="系统结构框图"></a>系统结构框图</h1><p><strong>Linux 主机</strong> <em>&lt;=====&gt;</em> <strong>Linux 从机</strong></p><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol><li><p>主机</p><ul><li><code>sudo apt-get install openssh-server</code></li><li><code>ifconfig -a</code>获取局域网内 <em>IP地址</em></li></ul></li><li><p>从机</p><ul><li><code>sudo apt-get install sshfs</code></li><li><code>sshfs -o idmap=user -o reconnect host_name@192.168.20.236:/path/to/your/workspace /path/to/your/workspace</code></li></ul></li><li><p>现在可以从从机开心地访问主机文件了</p></li></ol><blockquote><p><em>author</em> : Wangsong<br><br><em>mail</em> : easternslope@yeah.net</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;需要在PC主机(Linux)上编写代码,每次都要将代码拷贝到从机(Linux)上编译运行程序.这里用到&lt;
      
    
    </summary>
    
      <category term="linux" scheme="http://wangshub.github.io/categories/linux/"/>
    
      <category term="tool" scheme="http://wangshub.github.io/categories/linux/tool/"/>
    
    
      <category term="linux" scheme="http://wangshub.github.io/tags/linux/"/>
    
      <category term="tool" scheme="http://wangshub.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>python 数据结构之二叉搜索树</title>
    <link href="http://wangshub.github.io/2017/05/29/python-data-structure-BST/"/>
    <id>http://wangshub.github.io/2017/05/29/python-data-structure-BST/</id>
    <published>2017-05-29T15:06:12.000Z</published>
    <updated>2017-07-13T03:28:54.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉搜索树定义"><a href="#二叉搜索树定义" class="headerlink" title="二叉搜索树定义"></a>二叉搜索树定义</h1><p>一颗二叉搜索树是以二叉树来组织的,每个节点除了 <em>Key</em> 还包括 <em>左孩子</em>, <em>右孩子</em>, <em>父节点</em> 等信息. BST满足限制条件: <em>对于任意节点的X,他的 <strong>左子树中关键字最大值&lt;=X.key</strong> , <strong>右子树关键字最小值&gt;=X.key</strong></em> 这个关系表示如下<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://algs4.cs.princeton.edu/32bst/images/bst-anatomy.png" alt="二叉" title="">                </div>                <div class="image-caption">二叉</div>            </figure><br><br>根据上图定义,一个二叉搜索树的例子是<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://algs4.cs.princeton.edu/32bst/images/bst-subtree-count.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h1 id="二叉树操作"><a href="#二叉树操作" class="headerlink" title="二叉树操作"></a>二叉树操作</h1><ul><li>查询</li><li>插入</li><li>删除</li></ul><h2 id="查询-搜索"><a href="#查询-搜索" class="headerlink" title="查询(搜索)"></a>查询(搜索)</h2><p>二叉树搜索采用递归的方式来进行查询,根据二叉搜索树的定义: 左子树存储小值, 右子树存储大值,一个完整的二叉搜索示意图如下<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://algs4.cs.princeton.edu/32bst/images/bst-search.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><br>可以写成 <em>伪代码</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TREE-SEARCH(x, k)</span><br><span class="line">  <span class="keyword">if</span> x == NULL  <span class="keyword">or</span> k == x.key</span><br><span class="line">    <span class="keyword">return</span> x  </span><br><span class="line">  <span class="keyword">if</span> k &lt; x.key</span><br><span class="line">    <span class="keyword">return</span> TREE-SEARCH(x.left)</span><br><span class="line">  <span class="keyword">if</span> k &gt; x.key</span><br><span class="line">    <span class="keyword">return</span> TREE-SEARCH(x.right)</span><br></pre></td></tr></table></figure><p>转换成python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get</span><span class="params">(self, key, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key &lt; node.key:</span><br><span class="line">            <span class="keyword">return</span> self._get(key, node.left)</span><br><span class="line">        <span class="keyword">elif</span> key &gt; node.key:</span><br><span class="line">            <span class="keyword">return</span> self._get(key, node.right)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> node.val</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return the value paired with 'key'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Worst Case Complexity: O(N)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Balanced Tree Complexity: O(lg N)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self._get(key, self.root)</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>插入和删除比查询呢稍微复杂一些,因为该操作会引起二叉搜索树的大小变化,会改变动态集合的结构.插入呢又比删除稍微容易实现.插入分为两部</p><ul><li>查询插入节点</li><li>改变目标节点附近的数据结构</li></ul><p>插入过程示意图如下<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://algs4.cs.princeton.edu/32bst/images/bst-insert.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>相应的伪代码如下, 输入节点 <em>z</em> , <em>z.key = v</em>, <em>z.left = NULL</em>, <em>z.right = NULL</em>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TREE-INSERT(T, x)</span><br><span class="line">  y = NULL</span><br><span class="line">  x = T.root   <span class="comment"># 从根节点开始</span></span><br><span class="line">  <span class="keyword">while</span> x != NULL</span><br><span class="line">    y = x      <span class="comment"># 保存上一节点</span></span><br><span class="line">    <span class="keyword">if</span> z.key &lt; x.key <span class="comment"># 往左</span></span><br><span class="line">      x = x.left</span><br><span class="line">    <span class="keyword">else</span>             <span class="comment"># 往右</span></span><br><span class="line">      x = x.right</span><br><span class="line"></span><br><span class="line">  z.p = y        <span class="comment"># 父节点</span></span><br><span class="line">  <span class="keyword">if</span> y == NULL   <span class="comment"># tree T 为空</span></span><br><span class="line">    T.root = z</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> z.key &lt; y.key</span><br><span class="line">    y.left = z</span><br><span class="line">  <span class="keyword">else</span> y.right = z</span><br></pre></td></tr></table></figure><p>程序的运行复杂度取决于二叉树的形状<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://algs4.cs.princeton.edu/32bst/images/bst-typical.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><br>插入的运行时间取决于二叉搜索树的<em>高度h</em>,程序的运行时间<em>O(h)</em> ,所以二叉树形状的好坏直接影响算法的运行时间.</p><p>python代码实现为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_put</span><span class="params">(self, key, val, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># If we hit the end of a branch, create a new node</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> Node(key, val)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Follow left branch</span></span><br><span class="line">        <span class="keyword">if</span> key &lt; node.key:</span><br><span class="line">            node.left = self._put(key, val, node.left)</span><br><span class="line">        <span class="comment"># Follow right branch</span></span><br><span class="line">        <span class="keyword">elif</span> key &gt; node.key:</span><br><span class="line">            node.right = self._put(key, val, node.right)</span><br><span class="line">        <span class="comment"># Overwrite value</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.val = val</span><br><span class="line"></span><br><span class="line">        node.size_of_subtree = self._size(node.left) + self._size(node.right)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, val)</span>:</span></span><br><span class="line">          <span class="string">"""</span></span><br><span class="line"><span class="string">        Add a new key-value pair.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Worst Case Complexity: O(N)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Balanced Tree Complexity: O(lg N)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = self._put(key, val, self.root)</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除总共分为三种情况:</p><ul><li>如果删除节点x没有孩子,直接删除即可;</li><li>如果删除节点x有1个孩子,用孩子替换该节点位置;</li><li><p>如果删除节点x有2个孩子, 这个情况有些复杂.关键是要找到节点 <em>x的继承者</em> . 节点z的继承者在节点z的右子树中有最小的关键值.这种情况下的操作分为下面步骤:</p><ol><li>输入待删除的节点x 和 二叉搜索树T.</li><li>在节点x的右子树开始搜索:往右再往左找到最小值节点H;</li><li>H右孩子为H的父节点, H的左孩子为X的左孩子;</li></ol></li></ul><p>示意图如下,应该一目了然:<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://algs4.cs.princeton.edu/32bst/images/bst-delete.png" alt="](http://algs4.cs.princeton.edu/32bst/images/bst-deletemin.png) ![" title="">                </div>                <div class="image-caption">](http://algs4.cs.princeton.edu/32bst/images/bst-deletemin.png) ![</div>            </figure></p><p>根据上面的描述,删除的伪代码可以分为两部分:</p><ol><li><p>为了移动子树, 用一棵子树替换一棵子树,并成为双亲的孩子节点.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TRANSPLANT(T, u, v)</span><br><span class="line"><span class="keyword">if</span> u.p == NULL</span><br><span class="line">T.root = v</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> u = u.p.left</span><br><span class="line">u.p.left = v</span><br><span class="line"><span class="keyword">else</span> u.p.right = v</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v!= NULL</span><br><span class="line">v.p = u.p</span><br></pre></td></tr></table></figure></li><li><p>根据第一步完成二叉搜索树的删除过程:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">TREE-DELETE(T, z)</span><br><span class="line"><span class="keyword">if</span> z.left = NULL</span><br><span class="line">TRANSPLANT(T, z, z.right)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (z.right == NULL)</span><br><span class="line">TRANSPLANT(T, z, z.left)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">y = TREE-MINIMUM(z.right)</span><br><span class="line"><span class="keyword">if</span> y.p != z</span><br><span class="line">TRANSPLANT(T, y, y.right)</span><br><span class="line">y.right = z.right</span><br><span class="line">y.right.p = y</span><br><span class="line">TRANSPLANT(T, z, y)</span><br><span class="line">y.left = z.left</span><br><span class="line">y.left.p = y</span><br></pre></td></tr></table></figure><p>用python 实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_delete</span><span class="params">(self, key, node)</span>:</span></span><br><span class="line"> <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"> <span class="keyword">if</span> key &lt; node.key:</span><br><span class="line">     node.left = self._delete(key, node.left)</span><br><span class="line"> <span class="keyword">elif</span> key &gt; node.key:</span><br><span class="line">     node.right = self._delete(key, node.right)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">     <span class="keyword">if</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">         <span class="keyword">return</span> node.left</span><br><span class="line">     <span class="keyword">elif</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">         <span class="keyword">return</span> node.right</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         old_node = node</span><br><span class="line">         node = self._ceiling_node(key, node.right)</span><br><span class="line">         node.right = self._delete_min(old_node.right)</span><br><span class="line">         node.left = old_node.left</span><br><span class="line"> node.size_of_subtree = self._size(node.left) + self._size(node.right)+<span class="number">1</span></span><br><span class="line"> <span class="keyword">return</span> node</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_delete_min</span><span class="params">(self, node)</span>:</span></span><br><span class="line"> <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">     <span class="keyword">return</span> node.right</span><br><span class="line"></span><br><span class="line"> node.left = self._delete_min(node.left)</span><br><span class="line"> node.size_of_subtree = self._size(node.left) + self._size(node.right)+<span class="number">1</span></span><br><span class="line"> <span class="keyword">return</span> node</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ceiling_node</span><span class="params">(self, key, node)</span>:</span></span><br><span class="line"> <span class="string">"""</span></span><br><span class="line"><span class="string"> Returns the node with the smallest key that is greater than or equal to</span></span><br><span class="line"><span class="string"> the given value 'key'</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line"> <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> key &lt; node.key:</span><br><span class="line">     <span class="comment"># Ceiling is either in left subtree or is this node</span></span><br><span class="line">     attempt_in_left = self._ceiling_node(key, node.left)</span><br><span class="line">     <span class="keyword">if</span> attempt_in_left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">         <span class="keyword">return</span> node</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">return</span> attempt_in_left</span><br><span class="line"> <span class="keyword">elif</span> key &gt; node.key:</span><br><span class="line">     <span class="comment"># Ceiling must be in right subtree</span></span><br><span class="line">     <span class="keyword">return</span> self._ceiling_node(key, node.right)</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">     <span class="comment"># Keys are equal so ceiling is node with this key</span></span><br><span class="line">     <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>&lt;&lt;算法导论第三版&gt;&gt;</li><li><a href="http://algs4.cs.princeton.edu/32bst/" target="_blank" rel="noopener">http://algs4.cs.princeton.edu/32bst/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉搜索树定义&quot;&gt;&lt;a href=&quot;#二叉搜索树定义&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树定义&quot;&gt;&lt;/a&gt;二叉搜索树定义&lt;/h1&gt;&lt;p&gt;一颗二叉搜索树是以二叉树来组织的,每个节点除了 &lt;em&gt;Key&lt;/em&gt; 还包括 &lt;em&gt;左孩子&lt;/
      
    
    </summary>
    
      <category term="python" scheme="http://wangshub.github.io/categories/python/"/>
    
      <category term="code" scheme="http://wangshub.github.io/categories/python/code/"/>
    
      <category term="algorithm" scheme="http://wangshub.github.io/categories/python/code/algorithm/"/>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
      <category term="code" scheme="http://wangshub.github.io/tags/code/"/>
    
      <category term="algorithm" scheme="http://wangshub.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>python的webrtc库实现语音端点检测</title>
    <link href="http://wangshub.github.io/2017/05/25/python-vad/"/>
    <id>http://wangshub.github.io/2017/05/25/python-vad/</id>
    <published>2017-05-25T13:47:56.000Z</published>
    <updated>2017-07-13T03:28:54.662Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚搭了博客<a href="thinkhard.tech">thinkhard.tech</a>,欢迎踩踩~</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>语音端点检测最早应用于电话传输和检测系统当中,用于通信信道的时间分配,提高传输线路的利用效率.端点检测属于语音处理系统的前端操作,在语音检测领域意义重大.<br>但是目前的语音端点检测,尤其是检测 <em>人声</em> 开始和结束的端点始终是属于技术难点,各家公司始终处于 <strong>能判断</strong>,但是不敢保证 <strong>判别准确性</strong> 的阶段.<br><img src="https://ooo.0o0.ooo/2017/05/25/5926ed7fcc2b3.png" alt="Screenshot from 2017-05-25 22-42-50.png"><br>现在基于云端语义库的聊天机器人层出不穷,其中最著名的当属amazon的 <strong>Alexa/Echo</strong> 智能音箱.<br><img src="https://ooo.0o0.ooo/2017/05/25/5926ee0cbc85b.jpg" alt="timg.jpg"></p><p>国内如雨后春笋般出现了各种搭载语音聊天的智能音箱(如前几天在知乎上广告的若琪机器人)和各类智能机器人产品.国内语音服务提供商主要面对中文语音服务,由于语音不像图像有分辨率等等较为客观的指标,很多时候凭主观判断,所以较难判断各家语音识别和合成技术的好坏.但是我个人认为,国内的中文语音服务和国外的英文语音服务,在某些方面已经有超越的趋势.<br><img src="https://ooo.0o0.ooo/2017/05/25/5926f2220cae2.jpg" alt="timg (1).jpg"></p><p>通常搭建机器人聊天系统主要包括以下三个方面:    </p><ul><li>语音转文字(ASR/STT)    </li><li>语义内容(NLU/NLP)    </li><li>文字转语音(TTS)</li></ul><h2 id="语音转文字-ASR-STT"><a href="#语音转文字-ASR-STT" class="headerlink" title="语音转文字(ASR/STT)"></a>语音转文字(ASR/STT)</h2><p>在将语音传给云端API之前,是本地前端的语音采集,这部分主要包括如下几个方面:</p><ul><li>麦克风降噪</li><li>声源定位</li><li>回声消除</li><li>唤醒词</li><li>语音端点检测</li><li>音频格式压缩    </li></ul><a id="more"></a><h2 id="python-端点检测"><a href="#python-端点检测" class="headerlink" title="python 端点检测"></a>python 端点检测</h2><p>由于实际应用中,单纯依靠能量检测特征检测等方法很难判断人声说话的起始点,所以市面上大多数的语音产品都是使用唤醒词判断语音起始.另外加上声音回路,还可以做语音打断.这样的交互方式可能有些傻,每次必须喊一下 <em>唤醒词</em> 才能继续聊天.这种方式聊多了,个人感觉会嘴巴疼:-O .现在github上有snowboy唤醒词的开源库,大家可以登录snowboy官网训练自己的唤醒词模型.</p><ul><li>Kitt-AI : <a href="https://github.com/Kitt-AI/snowboy" target="_blank" rel="noopener">Snowboy</a></li><li>Sensory : <a href="http://www.sensory.com/" target="_blank" rel="noopener">Sensory</a>        </li></ul><p>考虑到用唤醒词嘴巴会累,所以大致调研了一下,python拥有丰富的库,直接import就能食用.这种方式容易受强噪声干扰,适合一个人在家玩玩.</p><ul><li>pyaudio: <code>pip install pyaudio</code> 可以从设备节点读取原始音频流数据,音频编码是PCM格式;</li><li>webrtcvad: <code>pip install webrtcvad</code> 检测判断一组语音数据是否为空语音;<br>当检测到持续时间长度 <em>T1</em> vad检测都有语音活动,可以判定为语音起始;<br>当检测到持续时间长度 <em>T2</em> vad检测都没有有语音活动,可以判定为语音结束;        </li></ul><p>完整程序代码可以从我的<a href="https://github.com/wangshub/python-vad" target="_blank" rel="noopener">github</a>下载<br>程序很简单,相信看一会儿就明白了</p><pre><code class="python"><span class="string">'''</span><span class="string">Requirements:</span><span class="string">+ pyaudio - `pip install pyaudio`</span><span class="string">+ py-webrtcvad - `pip install webrtcvad`</span><span class="string">'''</span><span class="keyword">import</span> webrtcvad<span class="keyword">import</span> collections<span class="keyword">import</span> sys<span class="keyword">import</span> signal<span class="keyword">import</span> pyaudio<span class="keyword">from</span> array <span class="keyword">import</span> array<span class="keyword">from</span> struct <span class="keyword">import</span> pack<span class="keyword">import</span> wave<span class="keyword">import</span> timeFORMAT = pyaudio.paInt16CHANNELS = <span class="number">1</span>RATE = <span class="number">16000</span>CHUNK_DURATION_MS = <span class="number">30</span>       <span class="comment"># supports 10, 20 and 30 (ms)</span>PADDING_DURATION_MS = <span class="number">1500</span>   <span class="comment"># 1 sec jugement</span>CHUNK_SIZE = int(RATE * CHUNK_DURATION_MS / <span class="number">1000</span>)  <span class="comment"># chunk to read</span>CHUNK_BYTES = CHUNK_SIZE * <span class="number">2</span>  <span class="comment"># 16bit = 2 bytes, PCM</span>NUM_PADDING_CHUNKS = int(PADDING_DURATION_MS / CHUNK_DURATION_MS)<span class="comment"># NUM_WINDOW_CHUNKS = int(240 / CHUNK_DURATION_MS)</span>NUM_WINDOW_CHUNKS = int(<span class="number">400</span> / CHUNK_DURATION_MS)  <span class="comment"># 400 ms/ 30ms  ge</span>NUM_WINDOW_CHUNKS_END = NUM_WINDOW_CHUNKS * <span class="number">2</span>START_OFFSET = int(NUM_WINDOW_CHUNKS * CHUNK_DURATION_MS * <span class="number">0.5</span> * RATE)vad = webrtcvad.Vad(<span class="number">1</span>)pa = pyaudio.PyAudio()stream = pa.open(format=FORMAT,                 channels=CHANNELS,                 rate=RATE,                 input=<span class="keyword">True</span>,                 start=<span class="keyword">False</span>,                 <span class="comment"># input_device_index=2,</span>                 frames_per_buffer=CHUNK_SIZE)got_a_sentence = <span class="keyword">False</span>leave = <span class="keyword">False</span><span class="function"><span class="keyword">def</span> <span class="title">handle_int</span><span class="params">(sig, chunk)</span>:</span>    <span class="keyword">global</span> leave, got_a_sentence    leave = <span class="keyword">True</span>    got_a_sentence = <span class="keyword">True</span><span class="function"><span class="keyword">def</span> <span class="title">record_to_file</span><span class="params">(path, data, sample_width)</span>:</span>    <span class="string">"Records from the microphone and outputs the resulting data to 'path'"</span>    <span class="comment"># sample_width, data = record()</span>    data = pack(<span class="string">'&lt;'</span> + (<span class="string">'h'</span> * len(data)), *data)    wf = wave.open(path, <span class="string">'wb'</span>)    wf.setnchannels(<span class="number">1</span>)    wf.setsampwidth(sample_width)    wf.setframerate(RATE)    wf.writeframes(data)    wf.close()<span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(snd_data)</span>:</span>    <span class="string">"Average the volume out"</span>    MAXIMUM = <span class="number">32767</span>  <span class="comment"># 16384</span>    times = float(MAXIMUM) / max(abs(i) <span class="keyword">for</span> i <span class="keyword">in</span> snd_data)    r = array(<span class="string">'h'</span>)    <span class="keyword">for</span> i <span class="keyword">in</span> snd_data:        r.append(int(i * times))    <span class="keyword">return</span> rsignal.signal(signal.SIGINT, handle_int)<span class="keyword">while</span> <span class="keyword">not</span> leave:    ring_buffer = collections.deque(maxlen=NUM_PADDING_CHUNKS)    triggered = <span class="keyword">False</span>    voiced_frames = []    ring_buffer_flags = [<span class="number">0</span>] * NUM_WINDOW_CHUNKS    ring_buffer_index = <span class="number">0</span>    ring_buffer_flags_end = [<span class="number">0</span>] * NUM_WINDOW_CHUNKS_END    ring_buffer_index_end = <span class="number">0</span>    buffer_in = <span class="string">''</span>    <span class="comment"># WangS</span>    raw_data = array(<span class="string">'h'</span>)    index = <span class="number">0</span>    start_point = <span class="number">0</span>    StartTime = time.time()    print(<span class="string">"* recording: "</span>)    stream.start_stream()    <span class="keyword">while</span> <span class="keyword">not</span> got_a_sentence <span class="keyword">and</span> <span class="keyword">not</span> leave:        chunk = stream.read(CHUNK_SIZE)        <span class="comment"># add WangS</span>        raw_data.extend(array(<span class="string">'h'</span>, chunk))        index += CHUNK_SIZE        TimeUse = time.time() - StartTime        active = vad.is_speech(chunk, RATE)        sys.stdout.write(<span class="string">'1'</span> <span class="keyword">if</span> active <span class="keyword">else</span> <span class="string">'_'</span>)        ring_buffer_flags[ring_buffer_index] = <span class="number">1</span> <span class="keyword">if</span> active <span class="keyword">else</span> <span class="number">0</span>        ring_buffer_index += <span class="number">1</span>        ring_buffer_index %= NUM_WINDOW_CHUNKS        ring_buffer_flags_end[ring_buffer_index_end] = <span class="number">1</span> <span class="keyword">if</span> active <span class="keyword">else</span> <span class="number">0</span>        ring_buffer_index_end += <span class="number">1</span>        ring_buffer_index_end %= NUM_WINDOW_CHUNKS_END        <span class="comment"># start point detection</span>        <span class="keyword">if</span> <span class="keyword">not</span> triggered:            ring_buffer.append(chunk)            num_voiced = sum(ring_buffer_flags)            <span class="keyword">if</span> num_voiced &gt; <span class="number">0.8</span> * NUM_WINDOW_CHUNKS:                sys.stdout.write(<span class="string">' Open '</span>)                triggered = <span class="keyword">True</span>                start_point = index - CHUNK_SIZE * <span class="number">20</span>  <span class="comment"># start point</span>                <span class="comment"># voiced_frames.extend(ring_buffer)</span>                ring_buffer.clear()        <span class="comment"># end point detection</span>        <span class="keyword">else</span>:            <span class="comment"># voiced_frames.append(chunk)</span>            ring_buffer.append(chunk)            num_unvoiced = NUM_WINDOW_CHUNKS_END - sum(ring_buffer_flags_end)            <span class="keyword">if</span> num_unvoiced &gt; <span class="number">0.90</span> * NUM_WINDOW_CHUNKS_END <span class="keyword">or</span> TimeUse &gt; <span class="number">10</span>:                sys.stdout.write(<span class="string">' Close '</span>)                triggered = <span class="keyword">False</span>                got_a_sentence = <span class="keyword">True</span>        sys.stdout.flush()    sys.stdout.write(<span class="string">'\n'</span>)    <span class="comment"># data = b''.join(voiced_frames)</span>    stream.stop_stream()    print(<span class="string">"* done recording"</span>)    got_a_sentence = <span class="keyword">False</span>    <span class="comment"># write to file</span>    raw_data.reverse()    <span class="keyword">for</span> index <span class="keyword">in</span> range(start_point):        raw_data.pop()    raw_data.reverse()    raw_data = normalize(raw_data)    record_to_file(<span class="string">"recording.wav"</span>, raw_data, <span class="number">2</span>)    leave = <span class="keyword">True</span>stream.close()</code></pre><p>程序运行方式<code>sudo python vad.py</code><br>qrcode_for_gh_3586401957c4_258.jpg     Remove</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚搭了博客&lt;a href=&quot;thinkhard.tech&quot;&gt;thinkhard.tech&lt;/a&gt;,欢迎踩踩~&lt;/p&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;语音端点检测最早应用于电话传输和检测系统当中,用于通信信道的时间分配,提高传输线路的利用效率.端点检测属于语音处理系统的前端操作,在语音检测领域意义重大.&lt;br&gt;但是目前的语音端点检测,尤其是检测 &lt;em&gt;人声&lt;/em&gt; 开始和结束的端点始终是属于技术难点,各家公司始终处于 &lt;strong&gt;能判断&lt;/strong&gt;,但是不敢保证 &lt;strong&gt;判别准确性&lt;/strong&gt; 的阶段.&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/25/5926ed7fcc2b3.png&quot; alt=&quot;Screenshot from 2017-05-25 22-42-50.png&quot;&gt;&lt;br&gt;现在基于云端语义库的聊天机器人层出不穷,其中最著名的当属amazon的 &lt;strong&gt;Alexa/Echo&lt;/strong&gt; 智能音箱.&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/25/5926ee0cbc85b.jpg&quot; alt=&quot;timg.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;国内如雨后春笋般出现了各种搭载语音聊天的智能音箱(如前几天在知乎上广告的若琪机器人)和各类智能机器人产品.国内语音服务提供商主要面对中文语音服务,由于语音不像图像有分辨率等等较为客观的指标,很多时候凭主观判断,所以较难判断各家语音识别和合成技术的好坏.但是我个人认为,国内的中文语音服务和国外的英文语音服务,在某些方面已经有超越的趋势.&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/25/5926f2220cae2.jpg&quot; alt=&quot;timg (1).jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;通常搭建机器人聊天系统主要包括以下三个方面:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语音转文字(ASR/STT)    &lt;/li&gt;
&lt;li&gt;语义内容(NLU/NLP)    &lt;/li&gt;
&lt;li&gt;文字转语音(TTS)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;语音转文字-ASR-STT&quot;&gt;&lt;a href=&quot;#语音转文字-ASR-STT&quot; class=&quot;headerlink&quot; title=&quot;语音转文字(ASR/STT)&quot;&gt;&lt;/a&gt;语音转文字(ASR/STT)&lt;/h2&gt;&lt;p&gt;在将语音传给云端API之前,是本地前端的语音采集,这部分主要包括如下几个方面:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;麦克风降噪&lt;/li&gt;
&lt;li&gt;声源定位&lt;/li&gt;
&lt;li&gt;回声消除&lt;/li&gt;
&lt;li&gt;唤醒词&lt;/li&gt;
&lt;li&gt;语音端点检测&lt;/li&gt;
&lt;li&gt;音频格式压缩    &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://wangshub.github.io/categories/Python/"/>
    
      <category term="Code" scheme="http://wangshub.github.io/categories/Python/Code/"/>
    
    
      <category term="Code" scheme="http://wangshub.github.io/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>Atom editor</title>
    <link href="http://wangshub.github.io/2017/05/25/Atom-editor/"/>
    <id>http://wangshub.github.io/2017/05/25/Atom-editor/</id>
    <published>2017-05-25T13:27:42.000Z</published>
    <updated>2017-07-13T03:28:54.652Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.clker.com/cliparts/3/8/9/1/1195436863389690204logomancer_Atom_Model.svg.hi.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>    <p>网上一直存在着vim和emacs两大阵营，两边的拥护者把这两个编辑器说的神乎其神。私以为，只是工具而已，对个人来说好用就行。Atom使用下来，我的感受就是</p><blockquote><ul><li>易安装，上手容易</li><li>插件安装方便</li><li>配置可备份</li></ul></blockquote><h1 id="Atom的安装"><a href="#Atom的安装" class="headerlink" title="Atom的安装"></a>Atom的安装</h1><p>我的系统是ubuntu16.04,直接<a href="atom.io">官网下载</a><code>*.deb</code>安装包，运行<code>dpkg -i atom.deb</code>.</p><h1 id="Atom插件"><a href="#Atom插件" class="headerlink" title="Atom插件"></a>Atom插件</h1><p>Atom下的插件安装十分便捷，在<code>install a package</code>下就能搜索安装。但是<code>GUI</code>的安装方式常常会安装失败，建议终端使用<code>apm install PackageName</code>安装插件。下面是我安装的一些插件：</p><ol><li><code>highlight-selected</code> 代码高亮插件；</li><li><code>terminal-fusion</code>Atom下的终端插件，强烈推荐，再也不用切换屏幕运行终端程序了；</li><li><code>simplified-chinese-menu</code>：简体中文插件；</li><li>待补充。。。</li></ol><h1 id="Atom配置"><a href="#Atom配置" class="headerlink" title="Atom配置"></a>Atom配置</h1><p>Atom自带的插件就能满足基本的日常需求，我能记起来的配置</p><ul><li><code>Markdown</code>文件预览：快捷键<code>Ctl-Shift-m</code>；</li><li>文件树，快捷键：<code>ctrl-\</code>；</li><li>文件查找：<code>ctrl-F</code>当前buffer中查找，<code>ctrl-shift-f</code>当前工程中查找；</li><li>代码跳转：首先首先<code>ctrl-alt-g</code>生成<code>.tags</code>文件，选中待跳转的函数，<code>ctrl-shift-r</code>完成跳转；</li><li><code>alt</code>键隐藏菜单栏，对于笔记本太有用了，整个界面也变得清爽；</li></ul><h1 id="Atom备份"><a href="#Atom备份" class="headerlink" title="Atom备份"></a>Atom备份</h1><p>经常在windows和Linux下进行切换，对于我常常作死把系统搞崩，所以需要备份Atom编辑器的配置，和<code>emacs</code>类似，可以将配置<code>～/.atom/</code>文件目录上传github,新装Atom的时候直接clone下来就好，我的配置github地址在<a href="https://github.com/wangshub/.atom.git" target="_blank" rel="noopener">这里</a></p><p>最后，上一张我的Atom效果图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ooo.0o0.ooo/2017/05/25/5926dc8d83d5c.png" alt="Screenshot from 2017-05-25 21-29-45.png" title="">                </div>                <div class="image-caption">Screenshot from 2017-05-25 21-29-45.png</div>            </figure></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://www.clker.com/cliparts/3/8/9/1/1195436863389690204logomancer_Atom_Model.svg.hi.png&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;    
&lt;p&gt;网上一直存在着vim和emacs两大阵营，两边的拥护者把这两个编辑器说的神乎其神。私以为，只是工具而已，对个人来说好用就行。Atom使用下来，我的感受就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;易安装，上手容易&lt;/li&gt;
&lt;li&gt;插件安装方便&lt;/li&gt;
&lt;li&gt;配置可备份&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Atom的安装&quot;&gt;&lt;a href=&quot;#Atom的安装&quot; class=&quot;headerlink&quot; title=&quot;Atom的安装&quot;&gt;&lt;/a&gt;Atom的安装&lt;/h1&gt;&lt;p&gt;我的系统是ubuntu16.04,直接&lt;a href=&quot;atom.io&quot;&gt;官网下载&lt;/a&gt;&lt;code&gt;*.deb&lt;/code&gt;安装包，运行&lt;code&gt;dpkg -i atom.deb&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;Atom插件&quot;&gt;&lt;a href=&quot;#Atom插件&quot; class=&quot;headerlink&quot; title=&quot;Atom插件&quot;&gt;&lt;/a&gt;Atom插件&lt;/h1&gt;&lt;p&gt;Atom下的插件安装十分便捷，在&lt;code&gt;install a package&lt;/code&gt;下就能搜索安装。但是&lt;code&gt;GUI&lt;/code&gt;的安装方式常常会安装失败，建议终端使用&lt;code&gt;apm install PackageName&lt;/code&gt;安装插件。下面是我安装的一些插件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;highlight-selected&lt;/code&gt; 代码高亮插件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terminal-fusion&lt;/code&gt;Atom下的终端插件，强烈推荐，再也不用切换屏幕运行终端程序了；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;simplified-chinese-menu&lt;/code&gt;：简体中文插件；&lt;/li&gt;
&lt;li&gt;待补充。。。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Atom配置&quot;&gt;&lt;a href=&quot;#Atom配置&quot; class=&quot;headerlink&quot; title=&quot;Atom配置&quot;&gt;&lt;/a&gt;Atom配置&lt;/h1&gt;&lt;p&gt;Atom自带的插件就能满足基本的日常需求，我能记起来的配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Markdown&lt;/code&gt;文件预览：快捷键&lt;code&gt;Ctl-Shift-m&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;文件树，快捷键：&lt;code&gt;ctrl-\&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;文件查找：&lt;code&gt;ctrl-F&lt;/code&gt;当前buffer中查找，&lt;code&gt;ctrl-shift-f&lt;/code&gt;当前工程中查找；&lt;/li&gt;
&lt;li&gt;代码跳转：首先首先&lt;code&gt;ctrl-alt-g&lt;/code&gt;生成&lt;code&gt;.tags&lt;/code&gt;文件，选中待跳转的函数，&lt;code&gt;ctrl-shift-r&lt;/code&gt;完成跳转；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt&lt;/code&gt;键隐藏菜单栏，对于笔记本太有用了，整个界面也变得清爽；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Atom备份&quot;&gt;&lt;a href=&quot;#Atom备份&quot; class=&quot;headerlink&quot; title=&quot;Atom备份&quot;&gt;&lt;/a&gt;Atom备份&lt;/h1&gt;&lt;p&gt;经常在windows和Linux下进行切换，对于我常常作死把系统搞崩，所以需要备份Atom编辑器的配置，和&lt;code&gt;emacs&lt;/code&gt;类似，可以将配置&lt;code&gt;～/.atom/&lt;/code&gt;文件目录上传github,新装Atom的时候直接clone下来就好，我的配置github地址在&lt;a href=&quot;https://github.com/wangshub/.atom.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后，上一张我的Atom效果图&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://ooo.0o0.ooo/2017/05/25/5926dc8d83d5c.png&quot; alt=&quot;Screenshot from 2017-05-25 21-29-45.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;Screenshot from 2017-05-25 21-29-45.png&lt;/div&gt;
            &lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://wangshub.github.io/categories/Tool/"/>
    
      <category term="Linux" scheme="http://wangshub.github.io/categories/Tool/Linux/"/>
    
    
      <category term="Editor" scheme="http://wangshub.github.io/tags/Editor/"/>
    
  </entry>
  
  <entry>
    <title>Cmake 模板</title>
    <link href="http://wangshub.github.io/2017/05/25/Cmake-tutorial/"/>
    <id>http://wangshub.github.io/2017/05/25/Cmake-tutorial/</id>
    <published>2017-05-24T16:03:34.000Z</published>
    <updated>2017-07-13T03:28:54.652Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ooo.0o0.ooo/2017/05/25/5925af646160e.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><a id="more"></a><p>由于之前的代码Cmake写的比较混乱，库链接的不规范，今天花了一些时间，重写Cmakelist.txt，方便后来的开发。可以根据我的模板开始进行C/C++的项目开发.主要分下面几个方面</p><blockquote><ul><li>更新CMakeList.txt文件</li><li>改变头文件位置，索引文件夹</li><li>上传新的gitlab</li></ul></blockquote><h2 id="CMakeList-txt模板"><a href="#CMakeList-txt模板" class="headerlink" title="CMakeList.txt模板"></a>CMakeList.txt模板</h2><h4 id="全局CMakeList-txt文件"><a href="#全局CMakeList-txt文件" class="headerlink" title="全局CMakeList.txt文件"></a>全局CMakeList.txt文件</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake 最低版本号要求</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span> (aelos1s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys dir</span></span><br><span class="line"><span class="keyword">find_package</span> (Threads)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找目录下的所有源文件</span></span><br><span class="line"><span class="comment"># 并将名称保存到 DIR_SRCS 变量</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. DIR_SRCS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 math 子目录</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(math)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(lib)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定生成目标</span></span><br><span class="line"><span class="keyword">add_executable</span>(aelos <span class="variable">$&#123;DIR_SRCS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加链接库</span></span><br><span class="line"><span class="comment"># 生成链接库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(aelos aeloslib)</span><br><span class="line"><span class="comment"># 多线程链接库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span> (aelos <span class="variable">$&#123;CMAKE_THREAD_LIBS_INIT&#125;</span>)</span><br></pre></td></tr></table></figure><h4 id="头文件库CMakeList-txt文件"><a href="#头文件库CMakeList-txt文件" class="headerlink" title="头文件库CMakeList.txt文件"></a>头文件库CMakeList.txt文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查找当前目录下的所有源文件</span><br><span class="line"># 并将名称保存到 DIR_LIB_SRCS 变量</span><br><span class="line">aux_source_directory(. DIR_LIB_SRCS)</span><br><span class="line"></span><br><span class="line"># 指定生成 aeloslib 链接库</span><br><span class="line">add_library (aeloslib $&#123;DIR_LIB_SRCS&#125;)</span><br></pre></td></tr></table></figure><h4 id="工程目录结构"><a href="#工程目录结构" class="headerlink" title="工程目录结构"></a>工程目录结构</h4><pre><code>the file structure is   |----main.cpp    #主程序    |----lib/        #*.cpp and *.h       |----build/      #可执行文件生成文件夹</code></pre><h4 id="工程参考模板的github地址"><a href="#工程参考模板的github地址" class="headerlink" title="工程参考模板的github地址"></a>工程参考模板的github地址</h4><blockquote><p><a href="https://github.com/wangshub/cmake" target="_blank" rel="noopener">https://github.com/wangshub/cmake</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://ooo.0o0.ooo/2017/05/25/5925af646160e.png&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://wangshub.github.io/categories/Programming/"/>
    
      <category term="Linux" scheme="http://wangshub.github.io/categories/Programming/Linux/"/>
    
      <category term="c/c++" scheme="http://wangshub.github.io/categories/Programming/Linux/c-c/"/>
    
    
      <category term="Code" scheme="http://wangshub.github.io/tags/Code/"/>
    
      <category term="Linux" scheme="http://wangshub.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wangshub.github.io/2017/04/14/hello-world/"/>
    <id>http://wangshub.github.io/2017/04/14/hello-world/</id>
    <published>2017-04-14T13:28:12.000Z</published>
    <updated>2017-12-14T13:47:18.945Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
